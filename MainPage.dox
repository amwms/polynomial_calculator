/**
@mainpage Dokumentacja zadania wielomiany

### Treść zadania

Uwaga: aktualna treść zadania znajduje się w [Moodle](https://moodle.mimuw.edu.pl).

### Opis programu

Tegoroczne duże zadanie polega na zaimplementowaniu operacji na wielomianach
rzadkich wielu zmiennych.

Jeśli wystąpi błąd krytyczny, program kończy się awaryjnie kodem 1.

Zaimplementowane są podstawowe działania na wielomianach opisane w interface poly.h.


W implementacji interface'u każdą operację (dodawanie i mnożenie dwóch wielomianów)
dzieję na trzy "pod operacje":

- dodawanie (mnożenie) do siebie dwóch wielomianów będących współczynnikami
- dodawanie (mnożenie) do siebie dwóch wielomianów nie będących współczynnikami
- dodawanie (mnożenie) do siebie wielomianów, jednego, który nie jest współczynnikiem
 i jednego, który jest współczynnikiem


Zachowuję również dwa niezmienniki dotyczące wielomianów:

- wielomian składa się z jednomianów które są posortowane po wykładnikach malejąco
- wielomian jest uproszczony najbardziej jak się da (jednomiany, z których się składa
 są uproszczone najbardziej jak się da, a w przypadku gdy wielomian się równa

 @f$x_0^0(współczynnik)@f$, zamieniam go na wielomian będący współczynnikiem) i nie zawiera jednomianów zerowych (w swoim składzie)

### KALKULATOR
Wszystkie pliki (poza poly.c i poly.h) są do implementacji kalkulatora na wielomianach.

Kalkulator ten wczytuje wielomiany na stos (jeśli wielomian jest nie poprawny wypisuje błąd) oraz wykonuje następujące
operacje (jeśli operacja nie istnieje lub ma złe parametry wypisuje odpowiedni błąd):

- ZERO – wstawia na wierzchołek stosu wielomian tożsamościowo równy zeru;
- IS_COEFF – sprawdza, czy wielomian na wierzchołku stosu jest współczynnikiem – wypisuje na standardowe wyjście 0 lub 1;
- IS_ZERO – sprawdza, czy wielomian na wierzchołku stosu jest tożsamościowo równy zeru – wypisuje na standardowe wyjście 0 lub 1;
- CLONE – wstawia na stos kopię wielomianu z wierzchołka;
- ADD – dodaje dwa wielomiany z wierzchu stosu, usuwa je i wstawia na wierzchołek stosu ich sumę;
- MUL – mnoży dwa wielomiany z wierzchu stosu, usuwa je i wstawia na wierzchołek stosu ich iloczyn;
- NEG – neguje wielomian na wierzchołku stosu;
- SUB – odejmuje od wielomianu z wierzchołka wielomian pod wierzchołkiem, usuwa je i wstawia na wierzchołek stosu różnicę;
- IS_EQ – sprawdza, czy dwa wielomiany na wierzchu stosu są równe – wypisuje na standardowe wyjście 0 lub 1;
- DEG – wypisuje na standardowe wyjście stopień wielomianu (−1 dla wielomianu tożsamościowo równego zeru);
- DEG_BY idx – wypisuje na standardowe wyjście stopień wielomianu ze względu na zmienną o numerze idx (−1 dla wielomianu tożsamościowo równego zeru);
- AT x – wylicza wartość wielomianu w punkcie x, usuwa wielomian z wierzchołka i wstawia na stos wynik operacji;
- PRINT – wypisuje na standardowe wyjście wielomian z wierzchołka stosu;
- POP – usuwa wielomian z wierzchołka stosu.

### COMPOSE
Do napisania funkcji PolyCompose wykorzystuję funkcje zaimplementowane poly_composing.c.

Wykorzystuję szybkie potęgowanie wielomianów, w którym zaimplementowałam optymalizację polegającą na wczęsniejszym obliczeniu wszystkich potęg (postaci @f$2^n@f$) wielomianu.

Została również dodana komenda COMPOSE do kalkulatora wielomianów.

- COMPOSE - składanie wielomianów:

Definiujemy operację składania wielomianów. Dany jest wielomian @f$p@f$ oraz @f$k@f$ wielomianów @f$q_0, q_1, q_2, …, q_{k−1}@f$.
Niech l oznacza liczbę zmiennych wielomianu @f$p@f$ i niech te zmienne są oznaczone odpowiednio @f$x_0, x_1, x_2, …, x_{l−1}@f$.
Wynikiem złożenia jest wielomian @f$p(q_0,q_1,q_2,…)@f$, czyli wielomian powstający przez podstawienie w wielomianie @f$p@f$
pod zmienną @f$x_i@f$ wielomianu @f$q_i@f$ dla @f$i=0,1,2,…,min(k,l)−1@f$.
Jeśli @f$k<l@f$, to pod zmienne @f$x_k, …, x_{l−1}@f$ podstawiamy zera. Na przykład, jeśli @f$k=0@f$, to wynikiem złożenia jest liczba p(0,0,0,…).

*/
